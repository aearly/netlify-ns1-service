// Package ServiceOapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ServiceOapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
)

// AnswerObject defines model for AnswerObject.
type AnswerObject struct {
	Answer *[]string `json:"answer,omitempty"`
	Feeds  *struct {
		Feed   *string `json:"feed,omitempty"`
		Source *string `json:"source,omitempty"`
	} `json:"feeds,omitempty"`
	Id     *string                 `json:"id,omitempty"`
	Meta   *map[string]interface{} `json:"meta,omitempty"`
	Region *string                 `json:"region,omitempty"`
	Type   *string                 `json:"type,omitempty"`
}

// DomainObject defines model for DomainObject.
type DomainObject struct {
	Answers *[]AnswerObject         `json:"answers,omitempty"`
	Domain  *string                 `json:"domain,omitempty"`
	Id      *string                 `json:"id,omitempty"`
	Meta    *map[string]interface{} `json:"meta,omitempty"`
	Tier    *int                    `json:"tier,omitempty"`
	Ttl     *int                    `json:"ttl,omitempty"`
	Zone    *string                 `json:"zone,omitempty"`
}

// ZoneObject defines model for ZoneObject.
type ZoneObject struct {
	DnsServers *[]string               `json:"dns_servers,omitempty"`
	Hostmaster *string                 `json:"hostmaster,omitempty"`
	Id         *string                 `json:"id,omitempty"`
	Meta       *map[string]interface{} `json:"meta,omitempty"`
	MxTtl      *int                    `json:"mx_ttl,omitempty"`
	Refresh    *int                    `json:"refresh,omitempty"`
	Retry      *int                    `json:"retry,omitempty"`
	Ttl        *int                    `json:"ttl,omitempty"`
	Zone       string                  `json:"zone"`
}

// Domain defines model for domain.
type Domain string

// RecordType defines model for recordType.
type RecordType string

// Zone defines model for zone.
type Zone string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetZones request
	GetZones(ctx context.Context) (*http.Response, error)

	// DeleteZone request
	DeleteZone(ctx context.Context, zone Zone) (*http.Response, error)

	// GetZone request
	GetZone(ctx context.Context, zone Zone) (*http.Response, error)

	// CreateZone request  with any body
	CreateZoneWithBody(ctx context.Context, zone Zone, contentType string, body io.Reader) (*http.Response, error)

	// GetDomain request
	GetDomain(ctx context.Context, zone Zone, domain Domain, recordType RecordType) (*http.Response, error)

	// CreateDomain request
	CreateDomain(ctx context.Context, zone Zone, domain Domain, recordType RecordType) (*http.Response, error)
}

func (c *Client) GetZones(ctx context.Context) (*http.Response, error) {
	req, err := NewGetZonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZone(ctx context.Context, zone Zone) (*http.Response, error) {
	req, err := NewDeleteZoneRequest(c.Server, zone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetZone(ctx context.Context, zone Zone) (*http.Response, error) {
	req, err := NewGetZoneRequest(c.Server, zone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZoneWithBody(ctx context.Context, zone Zone, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateZoneRequestWithBody(c.Server, zone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomain(ctx context.Context, zone Zone, domain Domain, recordType RecordType) (*http.Response, error) {
	req, err := NewGetDomainRequest(c.Server, zone, domain, recordType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomain(ctx context.Context, zone Zone, domain Domain, recordType RecordType) (*http.Response, error) {
	req, err := NewCreateDomainRequest(c.Server, zone, domain, recordType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetZonesRequest generates requests for GetZones
func NewGetZonesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/zones", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteZoneRequest generates requests for DeleteZone
func NewDeleteZoneRequest(server string, zone Zone) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "zone", zone)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/zones/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneRequest generates requests for GetZone
func NewGetZoneRequest(server string, zone Zone) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "zone", zone)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/zones/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateZoneRequestWithBody generates requests for CreateZone with any type of body
func NewCreateZoneRequestWithBody(server string, zone Zone, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "zone", zone)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/zones/%s", server, pathParam0)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDomainRequest generates requests for GetDomain
func NewGetDomainRequest(server string, zone Zone, domain Domain, recordType RecordType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "zone", zone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "recordType", recordType)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/zones/%s/%s/%s", server, pathParam0, pathParam1, pathParam2)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDomainRequest generates requests for CreateDomain
func NewCreateDomainRequest(server string, zone Zone, domain Domain, recordType RecordType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "zone", zone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "recordType", recordType)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/zones/%s/%s/%s", server, pathParam0, pathParam1, pathParam2)

	req, err := http.NewRequest("PUT", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

type getZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ZoneObject
}

// Status returns HTTPResponse.Status
func (r getZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type deleteZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r deleteZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r deleteZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneObject
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r getZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type createZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r createZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r createZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r getDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type createDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r createDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r createDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetZonesWithResponse request returning *GetZonesResponse
func (c *ClientWithResponses) GetZonesWithResponse(ctx context.Context) (*getZonesResponse, error) {
	rsp, err := c.GetZones(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetZonesResponse(rsp)
}

// DeleteZoneWithResponse request returning *DeleteZoneResponse
func (c *ClientWithResponses) DeleteZoneWithResponse(ctx context.Context, zone Zone) (*deleteZoneResponse, error) {
	rsp, err := c.DeleteZone(ctx, zone)
	if err != nil {
		return nil, err
	}
	return ParsedeleteZoneResponse(rsp)
}

// GetZoneWithResponse request returning *GetZoneResponse
func (c *ClientWithResponses) GetZoneWithResponse(ctx context.Context, zone Zone) (*getZoneResponse, error) {
	rsp, err := c.GetZone(ctx, zone)
	if err != nil {
		return nil, err
	}
	return ParsegetZoneResponse(rsp)
}

// CreateZoneWithBodyWithResponse request with arbitrary body returning *CreateZoneResponse
func (c *ClientWithResponses) CreateZoneWithBodyWithResponse(ctx context.Context, zone Zone, contentType string, body io.Reader) (*createZoneResponse, error) {
	rsp, err := c.CreateZoneWithBody(ctx, zone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsecreateZoneResponse(rsp)
}

// GetDomainWithResponse request returning *GetDomainResponse
func (c *ClientWithResponses) GetDomainWithResponse(ctx context.Context, zone Zone, domain Domain, recordType RecordType) (*getDomainResponse, error) {
	rsp, err := c.GetDomain(ctx, zone, domain, recordType)
	if err != nil {
		return nil, err
	}
	return ParsegetDomainResponse(rsp)
}

// CreateDomainWithResponse request returning *CreateDomainResponse
func (c *ClientWithResponses) CreateDomainWithResponse(ctx context.Context, zone Zone, domain Domain, recordType RecordType) (*createDomainResponse, error) {
	rsp, err := c.CreateDomain(ctx, zone, domain, recordType)
	if err != nil {
		return nil, err
	}
	return ParsecreateDomainResponse(rsp)
}

// ParsegetZonesResponse parses an HTTP response from a GetZonesWithResponse call
func ParsegetZonesResponse(rsp *http.Response) (*getZonesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]ZoneObject{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsedeleteZoneResponse parses an HTTP response from a DeleteZoneWithResponse call
func ParsedeleteZoneResponse(rsp *http.Response) (*deleteZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &deleteZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsegetZoneResponse parses an HTTP response from a GetZoneWithResponse call
func ParsegetZoneResponse(rsp *http.Response) (*getZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &ZoneObject{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &map[string]interface{}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsecreateZoneResponse parses an HTTP response from a CreateZoneWithResponse call
func ParsecreateZoneResponse(rsp *http.Response) (*createZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &createZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		response.JSON201 = &map[string]interface{}{}
		if err := json.Unmarshal(bodyBytes, response.JSON201); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetDomainResponse parses an HTTP response from a GetDomainWithResponse call
func ParsegetDomainResponse(rsp *http.Response) (*getDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsecreateDomainResponse parses an HTTP response from a CreateDomainWithResponse call
func ParsecreateDomainResponse(rsp *http.Response) (*createDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &createDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get a list of registered zones// (GET /zones)
	GetZones(ctx echo.Context) error
	// delete a zone// (DELETE /zones/{zone})
	DeleteZone(ctx echo.Context, zone Zone) error
	// get full info about a zone// (GET /zones/{zone})
	GetZone(ctx echo.Context, zone Zone) error
	// create a new zone// (PUT /zones/{zone})
	CreateZone(ctx echo.Context, zone Zone) error
	// get full info about a domain record// (GET /zones/{zone}/{domain}/{recordType})
	GetDomain(ctx echo.Context, zone Zone, domain Domain, recordType RecordType) error
	// create a new domain record// (PUT /zones/{zone}/{domain}/{recordType})
	CreateDomain(ctx echo.Context, zone Zone, domain Domain, recordType RecordType) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetZones(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZones(ctx)
	return err
}

// DeleteZone converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zone" -------------
	var zone Zone

	err = runtime.BindStyledParameter("simple", false, "zone", ctx.Param("zone"), &zone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zone: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteZone(ctx, zone)
	return err
}

// GetZone converts echo context to params.
func (w *ServerInterfaceWrapper) GetZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zone" -------------
	var zone Zone

	err = runtime.BindStyledParameter("simple", false, "zone", ctx.Param("zone"), &zone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zone: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZone(ctx, zone)
	return err
}

// CreateZone converts echo context to params.
func (w *ServerInterfaceWrapper) CreateZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zone" -------------
	var zone Zone

	err = runtime.BindStyledParameter("simple", false, "zone", ctx.Param("zone"), &zone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zone: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateZone(ctx, zone)
	return err
}

// GetDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zone" -------------
	var zone Zone

	err = runtime.BindStyledParameter("simple", false, "zone", ctx.Param("zone"), &zone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zone: %s", err))
	}

	// ------------- Path parameter "domain" -------------
	var domain Domain

	err = runtime.BindStyledParameter("simple", false, "domain", ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Path parameter "recordType" -------------
	var recordType RecordType

	err = runtime.BindStyledParameter("simple", false, "recordType", ctx.Param("recordType"), &recordType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recordType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDomain(ctx, zone, domain, recordType)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zone" -------------
	var zone Zone

	err = runtime.BindStyledParameter("simple", false, "zone", ctx.Param("zone"), &zone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zone: %s", err))
	}

	// ------------- Path parameter "domain" -------------
	var domain Domain

	err = runtime.BindStyledParameter("simple", false, "domain", ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Path parameter "recordType" -------------
	var recordType RecordType

	err = runtime.BindStyledParameter("simple", false, "recordType", ctx.Param("recordType"), &recordType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recordType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDomain(ctx, zone, domain, recordType)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/zones", wrapper.GetZones)
	router.DELETE("/zones/:zone", wrapper.DeleteZone)
	router.GET("/zones/:zone", wrapper.GetZone)
	router.PUT("/zones/:zone", wrapper.CreateZone)
	router.GET("/zones/:zone/:domain/:recordType", wrapper.GetDomain)
	router.PUT("/zones/:zone/:domain/:recordType", wrapper.CreateDomain)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWy3LbOgz9FQ7uXSqR0qRdaOc2WXQ6TRbtyh5PhpEgmxmJVEgoievRv3dA2vVD8ivN",
	"pgtbEgACPAeHjzlkpqqNRk0O0jnU0soKCa3/yk0lleY3/oda0hQi0LJCSJfOCCw+NcpiDinZBiNw2RQr",
	"yaNoVnOkI6v0BNqWYzNj85/e3pt1LeC0zL+M3pXTu07J1i6dnoWBdi9o7x4eMSPPkTU1WlLovdJ7fWXC",
	"yvWki5YGaa2c8XeBmLtuKjb3jnemsRn2415YTJheG4Hqz1EhrWNdxVucKKP3zHsOqJsK0hHc/oAIBvwb",
	"8P+X28H3GxhHx8zq2qtlP4lug8X/LRaQwn/xSqHxoivxRkt6CF4Jt4PpVHpIhe4uHEoTTtB6D5X9jqUU",
	"j6BlaDTuIiXX7t6hfd4m5qC8psZRJR1tTPztDFSv9zuhWiwsuukuJ9nZXu5yLGRTEqSXn5IkOonK1Woe",
	"hahxh14OU7owPoGikn0aqVTF7Ey7izMmV2W8NTDHfhEAFzU1alkrSOHyPDlPIPL7iec+5lL+bYK+Zdww",
	"ScrorzmkbBz6AJ6fq412IfhDkvAjM5pQ+3GyrkuV+ZHxowvrb7UhHbUI1rTTEQFDz9FlVtUUgA1EqRwJ",
	"UwgP4VyIm6qmmVCF0EajwFflyDPrmqqS3DiGI+SfcbxRsKgwDyl8cCAknvOjDS0tkbBLTbAPw1a8fsyM",
	"+lGuQnwJaMcdTi9CvXWUHCpCqXwLTLAKKUK6aG8H322Op/X92HZ323v3LRIWqbHa4xNe920EV8nVSTPo",
	"WUKbhYbL7EIbEoVpdN6jmqIpyxAlH0xDa6zXTQ/rmUX59+J4atDRZ5PP3khqv8DejzrfmAB1m7NgFVJo",
	"fFlQtb244nk41dp4vroktfu2ouvlDe0tjEYH4xaH7BGRa5e6rSWim7I8rJ1QSYQ0B0T0D4LeaP4WVi+T",
	"5SVgNIfGlpDClKhO47g0mSz5tE8/JgmfU5t6826R47MIGaAdt78DAAD//6UgkKrxCwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

